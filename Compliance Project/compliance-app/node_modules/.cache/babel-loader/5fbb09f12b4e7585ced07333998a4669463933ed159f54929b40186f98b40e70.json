{"ast":null,"code":"import { forwardRef, createElement } from 'react';\nconst defaultAttributes = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  width: 24,\n  height: 24,\n  viewBox: '0 0 24 24',\n  fill: 'none'\n};\nconst HugeiconsIcon = forwardRef(({\n  color = 'currentColor',\n  size = 24,\n  strokeWidth,\n  absoluteStrokeWidth = false,\n  className = '',\n  altIcon,\n  showAlt = false,\n  icon,\n  ...rest\n}, ref) => {\n  const calculatedStrokeWidth = strokeWidth !== undefined ? absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth : undefined;\n  const strokeProps = calculatedStrokeWidth !== undefined ? {\n    strokeWidth: calculatedStrokeWidth,\n    stroke: 'currentColor'\n  } : {};\n  const elementProps = {\n    ref,\n    ...defaultAttributes,\n    width: size,\n    height: size,\n    color,\n    className,\n    ...strokeProps,\n    ...rest\n  };\n  const currentIcon = showAlt && altIcon ? altIcon : icon;\n  // Create SVG children without adding them as an icon prop\n  const svgChildren = currentIcon.map(([tag, attrs]) => {\n    return createElement(tag, {\n      ...attrs,\n      ...strokeProps,\n      key: attrs.key\n    });\n  });\n  return createElement('svg', elementProps, svgChildren);\n});\nHugeiconsIcon.displayName = 'HugeiconsIcon';\nexport { HugeiconsIcon, HugeiconsIcon as default };","map":{"version":3,"names":["defaultAttributes","xmlns","width","height","viewBox","fill","HugeiconsIcon","forwardRef","color","size","strokeWidth","absoluteStrokeWidth","className","altIcon","showAlt","icon","rest","ref","calculatedStrokeWidth","undefined","Number","strokeProps","stroke","elementProps","currentIcon","svgChildren","map","tag","attrs","createElement","key","displayName"],"sources":["C:\\Users\\Relax\\Desktop\\Compliance Project-\\compliance-app\\node_modules\\@hugeicons\\react\\src\\HugeiconsIcon.tsx"],"sourcesContent":["import { createElement, forwardRef, ForwardRefExoticComponent, RefAttributes, SVGProps } from 'react';\n\nconst defaultAttributes = {\n  xmlns: 'http://www.w3.org/2000/svg',\n  width: 24,\n  height: 24,\n  viewBox: '0 0 24 24',\n  fill: 'none',\n};\n\nexport type IconSvgElement = readonly (readonly [string, { readonly [key: string]: string | number }])[];\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>;\ntype ComponentAttributes = RefAttributes<SVGSVGElement> & SVGAttributes;\n\nexport interface HugeiconsProps extends ComponentAttributes {\n  size?: string | number;\n  strokeWidth?: number;\n  absoluteStrokeWidth?: boolean;\n  altIcon?: IconSvgElement;\n  showAlt?: boolean;\n  icon?: IconSvgElement;\n}\n\nexport interface HugeiconsIconProps extends Omit<HugeiconsProps, 'ref' | 'altIcon'> {\n  icon: IconSvgElement;\n  altIcon?: IconSvgElement;\n}\n\nexport type HugeiconsIcon = ForwardRefExoticComponent<HugeiconsProps>;\n\nexport const HugeiconsIcon = forwardRef<SVGSVGElement, HugeiconsIconProps>(\n  (\n    {\n      color = 'currentColor',\n      size = 24,\n      strokeWidth,\n      absoluteStrokeWidth = false,\n      className = '',\n      altIcon,\n      showAlt = false,\n      icon,\n      ...rest\n    },\n    ref,\n  ) => {\n    const calculatedStrokeWidth = strokeWidth !== undefined\n      ? (absoluteStrokeWidth ? (Number(strokeWidth) * 24) / Number(size) : strokeWidth)\n      : undefined;\n\n    const strokeProps: { stroke?: string; strokeWidth?: number } = calculatedStrokeWidth !== undefined ? {\n      strokeWidth: calculatedStrokeWidth,\n      stroke: 'currentColor'\n    } : {};\n\n    const elementProps = {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      color,\n      className,\n      ...strokeProps,\n      ...rest,\n    };\n\n    const currentIcon = (showAlt && altIcon) ? altIcon : icon;\n\n    // Create SVG children without adding them as an icon prop\n    const svgChildren = currentIcon.map(([tag, attrs]) => {\n      return createElement(tag, { \n        ...attrs, \n        ...strokeProps,\n        key: attrs.key \n      });\n    });\n\n    return createElement(\n      'svg',\n      elementProps,\n      svgChildren\n    );\n  },\n);\n\nHugeiconsIcon.displayName = 'HugeiconsIcon';\n\nexport default HugeiconsIcon; "],"mappings":";AAEA,MAAMA,iBAAiB,GAAG;EACxBC,KAAK,EAAE,4BAA4B;EACnCC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE,WAAW;EACpBC,IAAI,EAAE;CACP;AAuBY,MAAAC,aAAa,GAAGC,UAAU,CACrC,CACE;EACEC,KAAK,GAAG,cAAc;EACtBC,IAAI,GAAG,EAAE;EACTC,WAAW;EACXC,mBAAmB,GAAG,KAAK;EAC3BC,SAAS,GAAG,EAAE;EACdC,OAAO;EACPC,OAAO,GAAG,KAAK;EACfC,IAAI;EACJ,GAAGC;AAAI,CACR,EACDC,GAAG,KACD;EACF,MAAMC,qBAAqB,GAAGR,WAAW,KAAKS,SAAS,GAClDR,mBAAmB,GAAIS,MAAM,CAACV,WAAW,CAAC,GAAG,EAAE,GAAIU,MAAM,CAACX,IAAI,CAAC,GAAGC,WAAW,GAC9ES,SAAS;EAEb,MAAME,WAAW,GAA8CH,qBAAqB,KAAKC,SAAS,GAAG;IACnGT,WAAW,EAAEQ,qBAAqB;IAClCI,MAAM,EAAE;GACT,GAAG,EAAE;EAEN,MAAMC,YAAY,GAAG;IACnBN,GAAG;IACH,GAAGjB,iBAAiB;IACpBE,KAAK,EAAEO,IAAI;IACXN,MAAM,EAAEM,IAAI;IACZD,KAAK;IACLI,SAAS;IACT,GAAGS,WAAW;IACd,GAAGL;GACJ;EAED,MAAMQ,WAAW,GAAIV,OAAO,IAAID,OAAO,GAAIA,OAAO,GAAGE,IAAI;;EAGzD,MAAMU,WAAW,GAAGD,WAAW,CAACE,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAI;IACnD,OAAOC,aAAa,CAACF,GAAG,EAAE;MACxB,GAAGC,KAAK;MACR,GAAGP,WAAW;MACdS,GAAG,EAAEF,KAAK,CAACE;IACZ,EAAC;EACJ,CAAC,CAAC;EAEF,OAAOD,aAAa,CAClB,KAAK,EACLN,YAAY,EACZE,WAAW,CACZ;AACH,CAAC;AAGHnB,aAAa,CAACyB,WAAW,GAAG,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}